{"/about":{"title":"About","data":{"":"This is the about page! This page is shown on the navbar."}},"/advanced":{"title":"Advanced","data":{"":"This is the index page for the Advanced folder!"}},"/advanced/satori":{"title":"Satori","data":{"":"Satori (悟り) is a Japanese Buddhist term for awakening, \"comprehension; understanding\"."}},"/":{"title":"Introduction","data":{"":"Welcome to ReactiveStore that allows effective state management in a simple way for JS applications.","what-does-reactivestore#What does ReactiveStore?":"It is a package for state management, based on the Flux architecture, in which the data flow is unidirectional. The data is received from the view through actions and through observers it will update the view again, this is achieved by implementing reactivity, which we rely on RxJS.ReactiveStore applies its processes in a simple way. It saves you the hassle of creating repetitive code and so the learning curve is not very steep, allowing for easy implementation for both experienced and inexperienced developers."}},"/installation":{"title":"Installation","data":{"":"Install from the NPM repository using:\nnpm install @rolster/reactive-store"}},"/state":{"title":"State","data":{"":"Each store that you implement in the project must extend ObjectLiteral (key value object) in order to manage its state changes optimally.\nlet a = 1;\nconsole.log(a);","state#State":"","external-component#External Component":""}}}